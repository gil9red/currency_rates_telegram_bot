#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'ipetrash'


# pip install python-telegram-bot
from telegram import Update, ReplyKeyboardMarkup, ParseMode
from telegram.ext import Dispatcher, MessageHandler, CommandHandler, Filters, CallbackContext

import db
from config import USER_NAME_ADMINS, PATH_GRAPH_WEEK, PATH_GRAPH_MONTH
from bot.common import get_date_str, log, log_func, process_error


COMMAND_SUBSCRIBE = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'
COMMAND_UNSUBSCRIBE = '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'
COMMAND_LAST = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
COMMAND_LAST_BY_WEEK = '–ó–∞ –Ω–µ–¥–µ–ª—é'
COMMAND_LAST_BY_MONTH = '–ó–∞ –º–µ—Å—è—Ü'

FILTER_BY_ADMIN = Filters.user(username=USER_NAME_ADMINS)


def get_keyboard(update):
    is_active = db.Subscription.get_is_active(update.effective_chat.id)

    commands = [
        [COMMAND_LAST, COMMAND_LAST_BY_WEEK, COMMAND_LAST_BY_MONTH],
        [COMMAND_UNSUBSCRIBE if is_active else COMMAND_SUBSCRIBE]
    ]
    return ReplyKeyboardMarkup(commands, resize_keyboard=True)


@log_func(log)
def on_start(update: Update, context: CallbackContext):
    update.effective_message.reply_html(
        f'–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é {update.effective_user.first_name} üôÇ\n'
        '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å USD –≤–∞–ª—é—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ üí≤.\n'
        '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü.',
        reply_markup=get_keyboard(update)
    )


@log_func(log)
def on_get_admin_stats(update: Update, context: CallbackContext):
    currency_count = db.ExchangeRate.select().count()
    first_date = get_date_str(db.ExchangeRate.select().first().date)
    last_date = get_date_str(db.ExchangeRate.get_last().date)

    subscription_active_count = db.Subscription.select().where(db.Subscription.is_active == True).count()

    update.effective_message.reply_html(
        f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞</b>\n\n'
        f'<b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b><u>{currency_count}</u></b>\n–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: <b><u>{first_date} - {last_date}</u></b>\n\n'
        f'<b>–ü–æ–¥–ø–∏—Å–∫–∏</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: <b><u>{subscription_active_count}</u></b>',
        reply_markup=get_keyboard(update)
    )


@log_func(log)
def on_command_subscribe(update: Update, context: CallbackContext):
    message = update.effective_message

    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)

    if not user:
        db.Subscription.create(chat_id=update.effective_chat.id)
        message.text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòâ"
    else:
        if user.get().is_active:
            message.text = "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ü§î"
        else:
            db.Subscription.set_active(user.get(), True)

            message.text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòâ"

    message.reply_html(
        message.text,
        reply_markup=get_keyboard(update)
    )


@log_func(log)
def on_command_unsubscribe(update: Update, context: CallbackContext):
    message = update.effective_message

    user = db.Subscription.get_is_active(update.effective_chat.id)

    if user:
        db.Subscription.set_active(user, False)

        message.text = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å üòî"
    else:
        message.text = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ü§î"

    message.reply_html(
        message.text,
        reply_markup=get_keyboard(update)
    )


@log_func(log)
def on_command_last(update: Update, context: CallbackContext):
    if db.ExchangeRate.select().first():
        update.effective_message.reply_html(
            f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD –∑–∞ <b><u>{get_date_str(db.ExchangeRate.get_last().date)}</u></b>: '
            f'{db.ExchangeRate.get_last().value}‚ÇΩ',
            reply_markup=get_keyboard(update)
        )
    else:
        update.effective_message.reply_html(
            '–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòî',
            reply_markup=get_keyboard(update)
        )


@log_func(log)
def on_command_last_by_week(update: Update, context: CallbackContext):
    message = update.effective_message

    items = [x.value for x in db.ExchangeRate.get_last_by(days=7)]
    if items:
        message.reply_photo(
            open(PATH_GRAPH_WEEK, 'rb'),
            f'–°—Ä–µ–¥–Ω–µ–µ USD –∑–∞ <b><u>–Ω–µ–¥–µ–ª—é</u></b>: {sum(items) / len(items):.2f}‚ÇΩ',
            parse_mode=ParseMode.HTML,
            reply_markup=get_keyboard(update)
        )
    else:
        message.reply_html(
            '–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòî',
            reply_markup=get_keyboard(update)
        )


@log_func(log)
def on_command_last_by_month(update: Update, context: CallbackContext):
    message = update.effective_message

    items = [x.value for x in db.ExchangeRate.get_last_by(days=30)]
    if items:
        message.reply_photo(
            open(PATH_GRAPH_MONTH, 'rb'),
            f'–°—Ä–µ–¥–Ω–µ–µ USD –∑–∞ <b><u>–º–µ—Å—è—Ü</u></b>: {sum(items) / len(items):.2f}‚ÇΩ',
            parse_mode=ParseMode.HTML,
            reply_markup=get_keyboard(update)
        )
    else:
        message.reply_html(
            '–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòî',
            reply_markup=get_keyboard(update)
        )


@log_func(log)
def on_request(update: Update, context: CallbackContext):
    update.effective_message.reply_html(
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§î',
        reply_markup=get_keyboard(update)
    )


def on_error(update: Update, context: CallbackContext):
    process_error(log, update, context)


def setup(dp: Dispatcher):
    dp.add_handler(CommandHandler('start', on_start))

    dp.add_handler(CommandHandler('admin_stats', on_get_admin_stats, FILTER_BY_ADMIN))
    # TODO: –í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    dp.add_handler(MessageHandler(Filters.text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞') and FILTER_BY_ADMIN, on_get_admin_stats))

    dp.add_handler(MessageHandler(Filters.text(COMMAND_LAST), on_command_last))
    dp.add_handler(MessageHandler(Filters.text(COMMAND_LAST_BY_WEEK), on_command_last_by_week))
    dp.add_handler(MessageHandler(Filters.text(COMMAND_LAST_BY_MONTH), on_command_last_by_month))

    dp.add_handler(MessageHandler(Filters.text(COMMAND_SUBSCRIBE), on_command_subscribe))
    dp.add_handler(MessageHandler(Filters.text(COMMAND_UNSUBSCRIBE), on_command_unsubscribe))

    dp.add_handler(MessageHandler(Filters.text, on_request))

    dp.add_error_handler(on_error)
